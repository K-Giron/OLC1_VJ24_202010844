/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package principal;

import abstracto.Instruccion;
import analizadores.parser;
import analizadores.scanner;
import excepciones.Errores;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import simbolo.Arbol;
import simbolo.Simbolo;
import simbolo.tablaSimbolos;
import simbolo.SimboloTabla;


/**
 *
 * @author kevin
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    //linkedlist de errores
    LinkedList<Errores> erroresGlobal = new LinkedList<>();
    //Linkedlist de simbolos
    LinkedList<SimboloTabla> tablaSimbolosGlobal = new LinkedList<>();
    //variable para el nombre del archivo

    String nombreArchivo = "";
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        textArea2 = new java.awt.TextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Javacraft");

        jButton1.setText("Interpretar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        jMenuItem4.setText("Errores");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Simbolos");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(495, 495, 495)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            String texto=textArea1.getText();
            scanner s = new scanner(new BufferedReader(new StringReader(texto)));
            parser p = new parser(s);
            var resultado = p.parse();
            var ast = new Arbol((LinkedList<Instruccion>) resultado.value);
            var tabla = new tablaSimbolos();
            tabla.setNombre("GLOBAL");
            ast.setConsola("");
            //unir las listas de errores
            LinkedList<Errores> errores = new LinkedList<>();
            errores.addAll(s.listaErrores);
            errores.addAll(p.listaErrores);
            
            
            

            for (var a : ast.getInstrucciones()) {
                if (a == null) {
                    continue;
                }
                var res = a.interpretar(ast, tabla);
                if (res instanceof Errores) {
                    errores.add((Errores) res);
                }
            }

            erroresGlobal = errores;
            textArea2.setText(ast.getConsola());
            System.out.println(ast.getConsola());
            
            //println errores
            for (var e : errores) {
                System.out.println(e);
            }
            //println simbolos
            for (var d : tabla.getTablaActual().values()) {
                if (d instanceof Simbolo) {
                    Simbolo simbolo = (Simbolo) d;
                    String mutabilidad = "";
                    if (simbolo.getMutabilidad() == false){
                        mutabilidad = "constante";
                    } else {
                        mutabilidad = "variable";
                    }
                    tablaSimbolosGlobal.add(new SimboloTabla(simbolo.getId(),mutabilidad, simbolo.getTipo().getTipo(), simbolo.getValor(), tabla.getNombre(), simbolo.getLinea(), simbolo.getColumna()));
                }
            }            
            
        } catch (Exception ex) {
            System.out.println("Algo salio mal");
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        String limpieza = "";
        
        textArea1.setText(limpieza);
        textArea2.setText(limpieza);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public static void report(String title, LinkedList<Errores> list) {
        String name = "Reporte de " + title + ".html";

        String contenido = "<html>\n" +
                "<head>\n" +
                "<title>" + name + "</title>\n" +
                "</head>\n" +
                "<body>\n" +
                "<h1>" + name + " Lexicos y Sintacticos</h1>\n";

        contenido += "<table border = \"1\">" +
                "        <tr>\n" +
                "            <th>Tipo</th>\n" +
                "            <th>Descripci√≥n</th>\n" +
                "            <th>Linea</th>\n" +
                "            <th>Columna</th>\n" +
                "        </tr>\n";

        for (Errores error : list) {
            System.out.println(error.getDesc());
            contenido += "<tr>\n" +
                    "    <td>"+ error.getTipo()+ "</td>\n" +
                    "    <td>" + error.getDesc() + "</td>\n" +
                    "    <td>" + error.getLinea() + "</td>\n" +
                    "    <td>" + error.getColumna() + "</td>\n" +
                    "</tr>\n";
        }

        contenido += "</table>\n" +
                "</body>\n" +
                "</html>";

        try {
            FileWriter fileWriter = new FileWriter("src/reportes/" + name);

            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            bufferedWriter.write(contenido);

            bufferedWriter.close();
            fileWriter.close();

            System.out.println("Se ha creado el archivo HTML exitosamente: " + name);
        } catch (IOException e) {
            System.out.println("Errore al crear un archivo");
            e.printStackTrace();
        }

    
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter extension = new FileNameExtensionFilter("*","jc");
        chooser.setFileFilter(extension);
        chooser.showOpenDialog(null);
        File archivo = chooser.getSelectedFile();
        //acceder al nombre del archivo
        
        try{
            
            FileReader fileread = new FileReader(archivo);
            BufferedReader bufferread = new BufferedReader(fileread);
            String contenido = "";
            String linea = "";
            textArea1.setText("");
            
            while((linea = bufferread.readLine()) != null){
                contenido += linea + "\n";
            }
            
            textArea1.setText(contenido);
            nombreArchivo = archivo.getName();
            
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Archivo no encontrado","ERROR",JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //analizadores.pa
        //si nombre de archivo esta vacio
        if(nombreArchivo.equals("")){
            nombreArchivo = "Reporte de errores";
        }
        //si la lista de errores esta vacia
        if(erroresGlobal.isEmpty()){
            JOptionPane.showMessageDialog(null,"No hay errores que reportar","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        report(nombreArchivo,erroresGlobal);

        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        //si nombre de archivo esta vacio
        if (nombreArchivo.equals("")) {
            nombreArchivo = "Tabla";
        }
        //si la lista de errores esta vacia
        if (tablaSimbolosGlobal.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay simbolos que reportar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        reporteSimbolo(nombreArchivo, tablaSimbolosGlobal);
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public static void reporteSimbolo(String title, LinkedList<SimboloTabla> list) {
        String name = "Reporte de Simbolos de " + title + ".html";

        String contenido = "<html>\n" +
                "<head>\n" +
                "<title>" + name + "</title>\n" +
                "</head>\n" +
                "<body>\n" +
                "<h1>" + name + " </h1>\n";

        contenido += "<table border = \"1\">" +
                "        <tr>\n" +
                "            <th>Id</th>\n" +
                "            <th>Mutabilidad</th>\n" +
                "            <th>Tipo</th>\n" +
                "            <th>Entorno</th>\n" +
                "            <th>Valor</th>\n" +
                "            <th>Linea</th>\n" +
                "            <th>Columna</th>\n" +
                "        </tr>\n";

        for (SimboloTabla sim : list) {
            contenido += "<tr>\n" +
                    "    <td>"+ sim.getId()+ "</td>\n" +
                    "    <td>" + sim.getMutabilidad() + "</td>\n" +
                    "    <td>" + sim.getTipo() + "</td>\n" +
                    "    <td>" + sim.getEntorno() + "</td>\n" +
                    "    <td>" + sim.getValor() + "</td>\n" +
                    "    <td>" + sim.getLinea() + "</td>\n" +
                    "    <td>" + sim.getColumna() + "</td>\n" +
                    "</tr>\n";
        }

        contenido += "</table>\n" +
                "</body>\n" +
                "</html>";

        try {
            FileWriter fileWriter = new FileWriter("src/reportes/" + name);

            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            bufferedWriter.write(contenido);

            bufferedWriter.close();
            fileWriter.close();

            System.out.println("Se ha creado el archivo HTML exitosamente: " + name);
        } catch (IOException e) {
            System.out.println("Errore al crear un archivo");
            e.printStackTrace();
        }

    
    }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    // End of variables declaration//GEN-END:variables
}
