
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import abstracto.Casos;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.DeclaracionVectores;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionLista;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Casteos;
import expresiones.Return;
import expresiones.AccesoVec;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\011\007\000\002\012\011\000\002" +
    "\012\007\000\002\013\006\000\002\013\011\000\002\013" +
    "\014\000\002\032\012\000\002\032\011\000\002\033\007" +
    "\000\002\033\006\000\002\004\006\000\002\004\004\000" +
    "\002\005\010\000\002\005\007\000\002\006\005\000\002" +
    "\006\003\000\002\034\015\000\002\034\017\000\002\035" +
    "\005\000\002\035\003\000\002\036\007\000\002\036\005" +
    "\000\002\040\015\000\002\014\011\000\002\014\015\000" +
    "\002\014\013\000\002\015\014\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\021\004\000\002\022" +
    "\004\000\002\037\005\000\002\037\004\000\002\023\005" +
    "\000\002\024\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\017\011\000\002\020\013\000\002\025" +
    "\010\000\002\025\007\000\002\025\007\000\002\007\004" +
    "\000\002\007\003\000\002\026\007\000\002\027\007\000" +
    "\002\031\004\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\004\000\002\031\006\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\006\000" +
    "\002\031\011\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\052\003\036\011\032\012\025\014\007\015" +
    "\015\016\011\017\051\020\006\021\024\023\030\025\021" +
    "\057\037\060\013\061\045\062\054\063\023\064\040\065" +
    "\034\070\033\072\046\001\002\000\004\011\371\001\002" +
    "\000\056\002\uffee\003\uffee\011\uffee\012\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\023\uffee\025\uffee" +
    "\040\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\070\uffee\072\uffee\001\002\000\016\011\uffc3" +
    "\013\uffc3\027\uffc3\045\uffc3\047\uffc3\066\uffc3\001\002\000" +
    "\004\026\365\001\002\000\056\002\ufff8\003\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\023\ufff8\025\ufff8\040\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\070\ufff8\072\ufff8\001" +
    "\002\000\016\011\uffc5\013\uffc5\027\uffc5\045\uffc5\047\uffc5" +
    "\066\uffc5\001\002\000\056\002\ufff1\003\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\025\ufff1\040\ufff1\057\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\070\ufff1\072\ufff1\001\002" +
    "\000\004\013\364\001\002\000\056\002\uffec\003\uffec\011" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\023\uffec\025\uffec\040\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\070\uffec\072\uffec" +
    "\001\002\000\016\011\uffc6\013\uffc6\027\uffc6\045\uffc6\047" +
    "\uffc6\066\uffc6\001\002\000\056\002\ufffe\003\ufffe\011\ufffe" +
    "\012\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\025\ufffe\040\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\072\ufffe\001" +
    "\002\000\056\002\ufff9\003\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\025" +
    "\ufff9\040\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\070\ufff9\072\ufff9\001\002\000\056\002" +
    "\ufff7\003\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\023\ufff7\025\ufff7\040\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\070\ufff7\072\ufff7\001\002\000\004\026\345\001\002\000" +
    "\054\002\000\003\036\011\032\012\025\014\007\015\015" +
    "\016\011\017\051\020\006\021\024\023\030\025\021\057" +
    "\037\060\013\061\045\062\054\063\023\064\040\065\034" +
    "\070\033\072\046\001\002\000\024\004\064\005\070\006" +
    "\065\007\067\010\076\011\073\026\072\031\066\055\074" +
    "\001\002\000\016\011\uffc2\013\uffc2\027\uffc2\045\uffc2\047" +
    "\uffc2\066\uffc2\001\002\000\004\011\262\001\002\000\004" +
    "\013\261\001\002\000\056\002\ufff3\003\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\023\ufff3\025\ufff3\040\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\070\ufff3\072\ufff3\001\002" +
    "\000\004\026\246\001\002\000\056\002\ufff4\003\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\023\ufff4\025\ufff4\040\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\070\ufff4\072\ufff4" +
    "\001\002\000\014\026\141\030\223\031\226\047\224\066" +
    "\225\001\002\000\026\004\064\005\070\006\065\007\067" +
    "\010\076\011\073\013\220\026\072\031\066\055\074\001" +
    "\002\000\004\011\211\001\002\000\004\013\210\001\002" +
    "\000\004\013\207\001\002\000\004\013\206\001\002\000" +
    "\016\011\uffc1\013\uffc1\027\uffc1\045\uffc1\047\uffc1\066\uffc1" +
    "\001\002\000\056\002\ufffb\003\ufffb\011\ufffb\012\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\025\ufffb\040\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\070\ufffb\072\ufffb\001\002\000\056" +
    "\002\ufffc\003\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\025\ufffc\040\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\070\ufffc\072\ufffc\001\002\000\056\002\ufff0\003\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\025\ufff0\040\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\070\ufff0\072" +
    "\ufff0\001\002\000\056\002\uffed\003\uffed\011\uffed\012\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023" +
    "\uffed\025\uffed\040\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\070\uffed\072\uffed\001\002\000" +
    "\004\026\200\001\002\000\004\044\166\001\002\000\056" +
    "\002\ufffd\003\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\023\ufffd\025\ufffd\040\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\070\ufffd\072\ufffd\001\002\000\056\002\uffef\003\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\023\uffef\025\uffef\040\uffef\057\uffef\060\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\070\uffef\072" +
    "\uffef\001\002\000\016\011\uffc4\013\uffc4\027\uffc4\045\uffc4" +
    "\047\uffc4\066\uffc4\001\002\000\004\002\165\001\002\000" +
    "\056\002\ufff2\003\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\025\ufff2\040" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\070\ufff2\072\ufff2\001\002\000\004\037\056\001" +
    "\002\000\056\002\ufffa\003\ufffa\011\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa\025" +
    "\ufffa\040\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\070\ufffa\072\ufffa\001\002\000\052\003" +
    "\036\011\032\012\025\014\007\015\015\016\011\017\051" +
    "\020\006\021\024\023\030\025\021\057\037\060\013\061" +
    "\045\062\054\063\023\064\040\065\034\070\033\072\046" +
    "\001\002\000\054\003\036\011\032\012\025\014\007\015" +
    "\015\016\011\017\051\020\006\021\024\023\030\025\021" +
    "\040\060\057\037\060\013\061\045\062\054\063\023\064" +
    "\040\065\034\070\033\072\046\001\002\000\004\061\062" +
    "\001\002\000\056\002\uffff\003\uffff\011\uffff\012\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\023\uffff" +
    "\025\uffff\040\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\070\uffff\072\uffff\001\002\000\004" +
    "\026\063\001\002\000\024\004\064\005\070\006\065\007" +
    "\067\010\076\011\073\026\072\031\066\055\074\001\002" +
    "\000\054\013\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\050\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\056\uffa2\067\uffa2\001\002\000\054\013\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\067\uffa3\001" +
    "\002\000\024\004\064\005\070\006\065\007\067\010\076" +
    "\011\073\026\072\031\066\055\074\001\002\000\054\013" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1" +
    "\067\uffa1\001\002\000\054\013\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\056\uffa4\067\uffa4\001\002\000\054" +
    "\013\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7\056" +
    "\uffa7\067\uffa7\001\002\000\040\004\064\005\070\006\065" +
    "\007\067\010\076\011\073\015\015\016\011\017\051\020" +
    "\006\021\024\026\072\031\066\055\074\064\040\001\002" +
    "\000\060\013\uff9f\026\141\027\uff9f\030\uff9f\031\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\056\uff9f\066\140\067\uff9f\001\002\000\024" +
    "\004\064\005\070\006\065\007\067\010\076\011\073\026" +
    "\072\031\066\055\074\001\002\000\042\027\110\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\041\114\042" +
    "\104\043\106\044\103\045\111\046\115\053\116\054\077" +
    "\056\100\001\002\000\054\013\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\056\uffa0\067\uffa0\001\002\000\024" +
    "\004\064\005\070\006\065\007\067\010\076\011\073\026" +
    "\072\031\066\055\074\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\024\004\064\005\070\006\065\007\067" +
    "\010\076\011\073\026\072\031\066\055\074\001\002\000" +
    "\024\004\064\005\070\006\065\007\067\010\076\011\073" +
    "\026\072\031\066\055\074\001\002\000\024\004\064\005" +
    "\070\006\065\007\067\010\076\011\073\026\072\031\066" +
    "\055\074\001\002\000\024\004\064\005\070\006\065\007" +
    "\067\010\076\011\073\026\072\031\066\055\074\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\024\004\064" +
    "\005\070\006\065\007\067\010\076\011\073\026\072\031" +
    "\066\055\074\001\002\000\024\004\064\005\070\006\065" +
    "\007\067\010\076\011\073\026\072\031\066\055\074\001" +
    "\002\000\004\013\125\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\024\004\064\005\070\006\065\007\067" +
    "\010\076\011\073\026\072\031\066\055\074\001\002\000" +
    "\024\004\064\005\070\006\065\007\067\010\076\011\073" +
    "\026\072\031\066\055\074\001\002\000\024\004\064\005" +
    "\070\006\065\007\067\010\076\011\073\026\072\031\066" +
    "\055\074\001\002\000\024\004\064\005\070\006\065\007" +
    "\067\010\076\011\073\026\072\031\066\055\074\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\054\013\uffaa" +
    "\027\uffaa\030\107\031\101\033\102\034\105\035\113\036" +
    "\112\037\uffaa\041\114\042\104\043\106\044\103\045\111" +
    "\046\115\050\uffaa\052\uffaa\053\uffaa\054\077\056\100\067" +
    "\uffaa\001\002\000\054\013\uffab\027\uffab\030\107\031\101" +
    "\033\102\034\105\035\113\036\112\037\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab\052\uffab" +
    "\053\uffab\054\uffab\056\uffab\067\uffab\001\002\000\054\013" +
    "\uffb0\027\uffb0\030\107\031\101\033\102\034\105\035\113" +
    "\036\112\037\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\050\uffb0\052\uffb0\053\uffb0\054\uffb0\056\uffb0" +
    "\067\uffb0\001\002\000\054\013\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\033\102\034\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\067\uffb3\001\002\000\054" +
    "\013\uffb1\027\uffb1\030\uffb1\031\uffb1\033\102\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1\056" +
    "\uffb1\067\uffb1\001\002\000\054\013\uffac\027\uffac\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\037\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac" +
    "\052\uffac\053\uffac\054\uffac\056\uffac\067\uffac\001\002\000" +
    "\056\002\uffbf\003\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\025\uffbf\040" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\070\uffbf\072\uffbf\001\002\000\054\013\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\033\102\034\105\035\113\036\112" +
    "\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6\067\uffb6" +
    "\001\002\000\054\013\uffae\027\uffae\030\107\031\101\033" +
    "\102\034\105\035\113\036\112\037\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\052\uffae\053" +
    "\uffae\054\uffae\056\uffae\067\uffae\001\002\000\054\013\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\033\102\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\056\uffb4\067" +
    "\uffb4\001\002\000\054\013\uffaf\027\uffaf\030\107\031\101" +
    "\033\102\034\105\035\113\036\112\037\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\056\uffaf\067\uffaf\001\002\000\054\013" +
    "\uffad\027\uffad\030\107\031\101\033\102\034\105\035\113" +
    "\036\112\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\050\uffad\052\uffad\053\uffad\054\uffad\056\uffad" +
    "\067\uffad\001\002\000\054\013\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\056\uffb2\067\uffb2\001\002\000\054" +
    "\013\uffb5\027\uffb5\030\uffb5\031\uffb5\033\102\034\105\035" +
    "\113\036\112\037\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\050\uffb5\052\uffb5\053\uffb5\054\uffb5\056" +
    "\uffb5\067\uffb5\001\002\000\054\013\uffa8\027\uffa8\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\037\uffa8\041" +
    "\114\042\104\043\106\044\103\045\111\046\115\050\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\056\uffa8\067\uffa8\001\002\000" +
    "\054\013\uffa9\027\uffa9\030\107\031\101\033\102\034\105" +
    "\035\113\036\112\037\uffa9\041\114\042\104\043\106\044" +
    "\103\045\111\046\115\050\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\056\100\067\uffa9\001\002\000\054\013\uffa6\027\uffa6\030" +
    "\107\031\101\033\102\034\105\035\113\036\112\037\uffa6" +
    "\041\114\042\104\043\106\044\103\045\111\046\115\050" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\067\uffa6\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\026\004\064" +
    "\005\070\006\065\007\067\010\076\011\073\026\072\027" +
    "\142\031\066\055\074\001\002\000\004\013\151\001\002" +
    "\000\006\027\146\052\145\001\002\000\044\027\uffdb\030" +
    "\107\031\101\033\102\034\105\035\113\036\112\041\114" +
    "\042\104\043\106\044\103\045\111\046\115\052\uffdb\053" +
    "\116\054\077\056\100\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\004\013\147\001\002\000\130\002\uffe2" +
    "\003\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\050\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\067\uffe2\070\uffe2\072\uffe2\001\002\000\044\027\uffdc\030" +
    "\107\031\101\033\102\034\105\035\113\036\112\041\114" +
    "\042\104\043\106\044\103\045\111\046\115\052\uffdc\053" +
    "\116\054\077\056\100\001\002\000\130\002\uffe1\003\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\050\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\067\uffe1" +
    "\070\uffe1\072\uffe1\001\002\000\042\030\107\031\101\033" +
    "\102\034\105\035\113\036\112\041\114\042\104\043\106" +
    "\044\103\045\111\046\115\053\116\054\077\056\100\067" +
    "\153\001\002\000\056\013\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\056\uff9e\066\154\067\uff9e\001\002\000" +
    "\024\004\064\005\070\006\065\007\067\010\076\011\073" +
    "\026\072\031\066\055\074\001\002\000\042\030\107\031" +
    "\101\033\102\034\105\035\113\036\112\041\114\042\104" +
    "\043\106\044\103\045\111\046\115\053\116\054\077\056" +
    "\100\067\156\001\002\000\054\013\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\056\uff9d\067\uff9d\001\002\000" +
    "\004\027\162\001\002\000\042\027\161\030\107\031\101" +
    "\033\102\034\105\035\113\036\112\041\114\042\104\043" +
    "\106\044\103\045\111\046\115\053\116\054\077\056\100" +
    "\001\002\000\054\013\uff9c\027\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\056\uff9c\067\uff9c\001\002\000\024\004\064" +
    "\005\070\006\065\007\067\010\076\011\073\026\072\031" +
    "\066\055\074\001\002\000\054\013\uffa5\027\uffa5\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\037\uffa5\041" +
    "\114\042\104\043\106\044\103\045\111\046\115\050\uffa5" +
    "\052\uffa5\053\116\054\077\056\100\067\uffa5\001\002\000" +
    "\054\013\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\050\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\056\uffb7\067\uffb7\001\002\000\004\002\001\001\002\000" +
    "\016\015\015\016\011\017\051\020\006\021\024\064\040" +
    "\001\002\000\004\045\170\001\002\000\004\011\171\001" +
    "\002\000\004\047\172\001\002\000\004\071\173\001\002" +
    "\000\004\072\174\001\002\000\004\026\175\001\002\000" +
    "\004\027\176\001\002\000\004\013\177\001\002\000\056" +
    "\002\uffd4\003\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\025\uffd4\040\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\070\uffd4\072\uffd4\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\042\027\202\030\107\031\101\033\102" +
    "\034\105\035\113\036\112\041\114\042\104\043\106\044" +
    "\103\045\111\046\115\053\116\054\077\056\100\001\002" +
    "\000\004\037\203\001\002\000\052\003\036\011\032\012" +
    "\025\014\007\015\015\016\011\017\051\020\006\021\024" +
    "\023\030\025\021\057\037\060\013\061\045\062\054\063" +
    "\023\064\040\065\034\070\033\072\046\001\002\000\054" +
    "\003\036\011\032\012\025\014\007\015\015\016\011\017" +
    "\051\020\006\021\024\023\030\025\021\040\205\057\037" +
    "\060\013\061\045\062\054\063\023\064\040\065\034\070" +
    "\033\072\046\001\002\000\056\002\uffc0\003\uffc0\011\uffc0" +
    "\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\023\uffc0\025\uffc0\040\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0\072\uffc0\001" +
    "\002\000\056\002\uffcc\003\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\025" +
    "\uffcc\040\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\070\uffcc\072\uffcc\001\002\000\056\002" +
    "\uffeb\003\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\023\uffeb\025\uffeb\040\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\070\uffeb\072\uffeb\001\002\000\056\002\ufff5\003\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\025\ufff5\040\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\070\ufff5\072\ufff5" +
    "\001\002\000\004\026\212\001\002\000\026\004\064\005" +
    "\070\006\065\007\067\010\076\011\073\026\072\027\213" +
    "\031\066\055\074\001\002\000\004\013\217\001\002\000" +
    "\006\027\215\052\145\001\002\000\004\013\216\001\002" +
    "\000\056\002\uffde\003\uffde\011\uffde\012\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\025\uffde" +
    "\040\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\070\uffde\072\uffde\001\002\000\056\002\uffdd" +
    "\003\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd\040\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\070" +
    "\uffdd\072\uffdd\001\002\000\056\002\uffc9\003\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\023\uffc9\025\uffc9\040\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\070\uffc9\072\uffc9\001" +
    "\002\000\042\013\222\030\107\031\101\033\102\034\105" +
    "\035\113\036\112\041\114\042\104\043\106\044\103\045" +
    "\111\046\115\053\116\054\077\056\100\001\002\000\056" +
    "\002\uffca\003\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\023\uffca\025\uffca\040\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\070\uffca\072\uffca\001\002\000\004\030\245\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\024\004\064" +
    "\005\070\006\065\007\067\010\076\011\073\026\072\031" +
    "\066\055\074\001\002\000\004\031\227\001\002\000\006" +
    "\013\uffc7\027\uffc7\001\002\000\042\030\107\031\101\033" +
    "\102\034\105\035\113\036\112\041\114\042\104\043\106" +
    "\044\103\045\111\046\115\053\116\054\077\056\100\067" +
    "\231\001\002\000\006\047\232\066\233\001\002\000\024" +
    "\004\064\005\070\006\065\007\067\010\076\011\073\026" +
    "\072\031\066\055\074\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\042\030\107\031\101\033\102\034\105" +
    "\035\113\036\112\041\114\042\104\043\106\044\103\045" +
    "\111\046\115\053\116\054\077\056\100\067\235\001\002" +
    "\000\004\047\236\001\002\000\024\004\064\005\070\006" +
    "\065\007\067\010\076\011\073\026\072\031\066\055\074" +
    "\001\002\000\042\013\240\030\107\031\101\033\102\034" +
    "\105\035\113\036\112\041\114\042\104\043\106\044\103" +
    "\045\111\046\115\053\116\054\077\056\100\001\002\000" +
    "\076\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\023\uffe5\025\uffe5\026\uffe5\031\uffe5" +
    "\040\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\070\uffe5\072\uffe5\001\002\000\042" +
    "\013\242\030\107\031\101\033\102\034\105\035\113\036" +
    "\112\041\114\042\104\043\106\044\103\045\111\046\115" +
    "\053\116\054\077\056\100\001\002\000\076\002\uffe6\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\023\uffe6\025\uffe6\026\uffe6\031\uffe6\040\uffe6\055\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\070\uffe6\072\uffe6\001\002\000\042\013\244\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\041\114\042" +
    "\104\043\106\044\103\045\111\046\115\053\116\054\077" +
    "\056\100\001\002\000\076\002\uffe7\003\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\025" +
    "\uffe7\026\uffe7\031\uffe7\040\uffe7\055\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7\072" +
    "\uffe7\001\002\000\006\013\uffc8\027\uffc8\001\002\000\024" +
    "\004\064\005\070\006\065\007\067\010\076\011\073\026" +
    "\072\031\066\055\074\001\002\000\042\027\250\030\107" +
    "\031\101\033\102\034\105\035\113\036\112\041\114\042" +
    "\104\043\106\044\103\045\111\046\115\053\116\054\077" +
    "\056\100\001\002\000\004\037\251\001\002\000\052\003" +
    "\036\011\032\012\025\014\007\015\015\016\011\017\051" +
    "\020\006\021\024\023\030\025\021\057\037\060\013\061" +
    "\045\062\054\063\023\064\040\065\034\070\033\072\046" +
    "\001\002\000\054\003\036\011\032\012\025\014\007\015" +
    "\015\016\011\017\051\020\006\021\024\023\030\025\021" +
    "\040\253\057\037\060\013\061\045\062\054\063\023\064" +
    "\040\065\034\070\033\072\046\001\002\000\060\002\uffd3" +
    "\003\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\024\254\025\uffd3\040\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\070\uffd3\072\uffd3\001\002\000\006\023\030\037\256" +
    "\001\002\000\056\002\uffd1\003\uffd1\011\uffd1\012\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\025\uffd1\040\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\070\uffd1\072\uffd1\001\002\000\052" +
    "\003\036\011\032\012\025\014\007\015\015\016\011\017" +
    "\051\020\006\021\024\023\030\025\021\057\037\060\013" +
    "\061\045\062\054\063\023\064\040\065\034\070\033\072" +
    "\046\001\002\000\054\003\036\011\032\012\025\014\007" +
    "\015\015\016\011\017\051\020\006\021\024\023\030\025" +
    "\021\040\260\057\037\060\013\061\045\062\054\063\023" +
    "\064\040\065\034\070\033\072\046\001\002\000\056\002" +
    "\uffd2\003\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\040\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\070\uffd2\072\uffd2\001\002\000\056\002\ufff6\003\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\023\ufff6\025\ufff6\040\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\070\ufff6\072\ufff6" +
    "\001\002\000\004\022\263\001\002\000\016\015\015\016" +
    "\011\017\051\020\006\021\024\064\040\001\002\000\010" +
    "\013\265\047\266\066\267\001\002\000\056\002\uffe8\003" +
    "\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\025\uffe8\040\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\070\uffe8" +
    "\072\uffe8\001\002\000\024\004\064\005\070\006\065\007" +
    "\067\010\076\011\073\026\072\031\066\055\074\001\002" +
    "\000\004\067\270\001\002\000\006\047\272\066\271\001" +
    "\002\000\004\067\302\001\002\000\004\066\273\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\006\052\276" +
    "\067\277\001\002\000\044\030\107\031\101\033\102\034" +
    "\105\035\113\036\112\041\114\042\104\043\106\044\103" +
    "\045\111\046\115\052\uffd7\053\116\054\077\056\100\067" +
    "\uffd7\001\002\000\024\004\064\005\070\006\065\007\067" +
    "\010\076\011\073\026\072\031\066\055\074\001\002\000" +
    "\004\013\300\001\002\000\056\002\uffda\003\uffda\011\uffda" +
    "\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\023\uffda\025\uffda\040\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\070\uffda\072\uffda\001" +
    "\002\000\044\030\107\031\101\033\102\034\105\035\113" +
    "\036\112\041\114\042\104\043\106\044\103\045\111\046" +
    "\115\052\uffd8\053\116\054\077\056\100\067\uffd8\001\002" +
    "\000\004\047\303\001\002\000\004\066\304\001\002\000" +
    "\004\066\306\001\002\000\006\052\311\067\312\001\002" +
    "\000\024\004\064\005\070\006\065\007\067\010\076\011" +
    "\073\026\072\031\066\055\074\001\002\000\006\052\276" +
    "\067\310\001\002\000\006\052\uffd5\067\uffd5\001\002\000" +
    "\004\066\314\001\002\000\004\013\313\001\002\000\056" +
    "\002\uffd9\003\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\025\uffd9\040\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\070\uffd9\072\uffd9\001\002\000\024\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\055" +
    "\074\001\002\000\006\052\276\067\316\001\002\000\006" +
    "\052\uffd6\067\uffd6\001\002\000\042\013\320\030\107\031" +
    "\101\033\102\034\105\035\113\036\112\041\114\042\104" +
    "\043\106\044\103\045\111\046\115\053\116\054\077\056" +
    "\100\001\002\000\056\002\uffe9\003\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\023" +
    "\uffe9\025\uffe9\040\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\070\uffe9\072\uffe9\001\002\000" +
    "\042\030\107\031\101\033\102\034\105\035\113\036\112" +
    "\037\322\041\114\042\104\043\106\044\103\045\111\046" +
    "\115\053\116\054\077\056\100\001\002\000\026\004\064" +
    "\005\070\006\065\007\067\010\076\011\073\026\072\031" +
    "\066\051\324\055\074\001\002\000\030\004\064\005\070" +
    "\006\065\007\067\010\076\011\073\026\072\031\066\040" +
    "\342\051\324\055\074\001\002\000\004\050\335\001\002" +
    "\000\030\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\026\uffba\031\uffba\040\uffba\051\uffba\055\uffba\001\002" +
    "\000\004\040\334\001\002\000\042\030\107\031\101\033" +
    "\102\034\105\035\113\036\112\041\114\042\104\043\106" +
    "\044\103\045\111\046\115\050\330\053\116\054\077\056" +
    "\100\001\002\000\004\037\331\001\002\000\052\003\036" +
    "\011\032\012\025\014\007\015\015\016\011\017\051\020" +
    "\006\021\024\023\030\025\021\057\037\060\013\061\045" +
    "\062\054\063\023\064\040\065\034\070\033\072\046\001" +
    "\002\000\054\003\036\011\032\012\025\014\007\015\015" +
    "\016\011\017\051\020\006\021\024\023\030\025\021\040" +
    "\333\057\037\060\013\061\045\062\054\063\023\064\040" +
    "\065\034\070\033\072\046\001\002\000\030\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\026\uffb9\031\uffb9" +
    "\040\uffb9\051\uffb9\055\uffb9\001\002\000\056\002\uffbc\003" +
    "\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\025\uffbc\040\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\070\uffbc" +
    "\072\uffbc\001\002\000\004\037\336\001\002\000\052\003" +
    "\036\011\032\012\025\014\007\015\015\016\011\017\051" +
    "\020\006\021\024\023\030\025\021\057\037\060\013\061" +
    "\045\062\054\063\023\064\040\065\034\070\033\072\046" +
    "\001\002\000\054\003\036\011\032\012\025\014\007\015" +
    "\015\016\011\017\051\020\006\021\024\023\030\025\021" +
    "\040\340\057\037\060\013\061\045\062\054\063\023\064" +
    "\040\065\034\070\033\072\046\001\002\000\004\040\uffb8" +
    "\001\002\000\030\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\026\uffbb\031\uffbb\040\uffbb\051\uffbb\055\uffbb" +
    "\001\002\000\056\002\uffbd\003\uffbd\011\uffbd\012\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd" +
    "\025\uffbd\040\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\070\uffbd\072\uffbd\001\002\000\004" +
    "\040\344\001\002\000\056\002\uffbe\003\uffbe\011\uffbe\012" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\023\uffbe\025\uffbe\040\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\070\uffbe\072\uffbe\001\002" +
    "\000\004\011\346\001\002\000\006\047\224\066\225\001" +
    "\002\000\024\004\064\005\070\006\065\007\067\010\076" +
    "\011\073\026\072\031\066\055\074\001\002\000\042\013" +
    "\351\030\107\031\101\033\102\034\105\035\113\036\112" +
    "\041\114\042\104\043\106\044\103\045\111\046\115\053" +
    "\116\054\077\056\100\001\002\000\004\011\352\001\002" +
    "\000\010\030\223\031\226\047\362\001\002\000\004\027" +
    "\356\001\002\000\004\027\uffcd\001\002\000\004\027\uffce" +
    "\001\002\000\004\037\357\001\002\000\052\003\036\011" +
    "\032\012\025\014\007\015\015\016\011\017\051\020\006" +
    "\021\024\023\030\025\021\057\037\060\013\061\045\062" +
    "\054\063\023\064\040\065\034\070\033\072\046\001\002" +
    "\000\054\003\036\011\032\012\025\014\007\015\015\016" +
    "\011\017\051\020\006\021\024\023\030\025\021\040\361" +
    "\057\037\060\013\061\045\062\054\063\023\064\040\065" +
    "\034\070\033\072\046\001\002\000\056\002\uffd0\003\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\025\uffd0\040\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\070\uffd0\072" +
    "\uffd0\001\002\000\024\004\064\005\070\006\065\007\067" +
    "\010\076\011\073\026\072\031\066\055\074\001\002\000" +
    "\042\027\uffcf\030\107\031\101\033\102\034\105\035\113" +
    "\036\112\041\114\042\104\043\106\044\103\045\111\046" +
    "\115\053\116\054\077\056\100\001\002\000\056\002\uffcb" +
    "\003\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\023\uffcb\025\uffcb\040\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\070" +
    "\uffcb\072\uffcb\001\002\000\024\004\064\005\070\006\065" +
    "\007\067\010\076\011\073\026\072\031\066\055\074\001" +
    "\002\000\042\027\367\030\107\031\101\033\102\034\105" +
    "\035\113\036\112\041\114\042\104\043\106\044\103\045" +
    "\111\046\115\053\116\054\077\056\100\001\002\000\004" +
    "\013\370\001\002\000\056\002\uffea\003\uffea\011\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\023\uffea\025\uffea\040\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\070\uffea\072\uffea\001\002" +
    "\000\004\026\372\001\002\000\020\015\015\016\011\017" +
    "\051\020\006\021\024\027\374\064\040\001\002\000\006" +
    "\027\u0103\052\u0102\001\002\000\004\037\377\001\002\000" +
    "\004\011\376\001\002\000\006\027\uffdf\052\uffdf\001\002" +
    "\000\052\003\036\011\032\012\025\014\007\015\015\016" +
    "\011\017\051\020\006\021\024\023\030\025\021\057\037" +
    "\060\013\061\045\062\054\063\023\064\040\065\034\070" +
    "\033\072\046\001\002\000\054\003\036\011\032\012\025" +
    "\014\007\015\015\016\011\017\051\020\006\021\024\023" +
    "\030\025\021\040\u0101\057\037\060\013\061\045\062\054" +
    "\063\023\064\040\065\034\070\033\072\046\001\002\000" +
    "\056\002\uffe3\003\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\025\uffe3\040" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\070\uffe3\072\uffe3\001\002\000\016\015\015\016" +
    "\011\017\051\020\006\021\024\064\040\001\002\000\004" +
    "\037\u0104\001\002\000\052\003\036\011\032\012\025\014" +
    "\007\015\015\016\011\017\051\020\006\021\024\023\030" +
    "\025\021\057\037\060\013\061\045\062\054\063\023\064" +
    "\040\065\034\070\033\072\046\001\002\000\054\003\036" +
    "\011\032\012\025\014\007\015\015\016\011\017\051\020" +
    "\006\021\024\023\030\025\021\040\u0106\057\037\060\013" +
    "\061\045\062\054\063\023\064\040\065\034\070\033\072" +
    "\046\001\002\000\056\002\uffe4\003\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\040\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\070\uffe4\072\uffe4\001\002\000" +
    "\004\011\u0108\001\002\000\006\027\uffe0\052\uffe0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\056\002\051\003\021\005\042\010\015\011" +
    "\046\012\041\013\040\014\054\015\016\017\030\020\026" +
    "\021\007\022\017\023\025\024\034\025\052\030\003\032" +
    "\011\033\047\034\004\037\043\040\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\005\042\010\060\011\046\012\041\013" +
    "\040\014\054\015\016\017\030\020\026\021\007\022\017" +
    "\023\025\024\034\025\052\030\003\032\011\033\047\034" +
    "\004\037\043\040\013\001\001\000\006\031\320\033\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\220\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\056\005\042\010" +
    "\015\011\046\012\041\013\040\014\054\015\016\017\030" +
    "\020\026\021\007\022\017\023\025\024\034\025\052\030" +
    "\003\032\011\033\047\034\004\037\043\040\013\001\001" +
    "\000\052\005\042\010\060\011\046\012\041\013\040\014" +
    "\054\015\016\017\030\020\026\021\007\022\017\023\025" +
    "\024\034\025\052\030\003\032\011\033\047\034\004\037" +
    "\043\040\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\074\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\163\033\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\156\031\157\033\070\001\001\000\002" +
    "\001\001\000\006\031\136\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\135\033\070\001\001" +
    "\000\006\031\134\033\070\001\001\000\006\031\133\033" +
    "\070\001\001\000\006\031\132\033\070\001\001\000\006" +
    "\031\131\033\070\001\001\000\006\031\130\033\070\001" +
    "\001\000\006\031\127\033\070\001\001\000\006\031\126" +
    "\033\070\001\001\000\006\031\125\033\070\001\001\000" +
    "\002\001\001\000\006\031\123\033\070\001\001\000\006" +
    "\031\122\033\070\001\001\000\006\031\121\033\070\001" +
    "\001\000\006\031\120\033\070\001\001\000\006\031\117" +
    "\033\070\001\001\000\006\031\116\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\151\033\070\001\001\000\010\006" +
    "\142\031\143\033\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\147\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\154\033\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\162\033\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\200\033\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\203\005\042\010\015\011\046\012\041" +
    "\013\040\014\054\015\016\017\030\020\026\021\007\022" +
    "\017\023\025\024\034\025\052\030\003\032\011\033\047" +
    "\034\004\037\043\040\013\001\001\000\052\005\042\010" +
    "\060\011\046\012\041\013\040\014\054\015\016\017\030" +
    "\020\026\021\007\022\017\023\025\024\034\025\052\030" +
    "\003\032\011\033\047\034\004\037\043\040\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\213\031\143" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\242\033\070\001\001\000\006\031\227" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\240\033\070" +
    "\001\001\000\006\031\233\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\236\033\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\246\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\251\005\042\010\015" +
    "\011\046\012\041\013\040\014\054\015\016\017\030\020" +
    "\026\021\007\022\017\023\025\024\034\025\052\030\003" +
    "\032\011\033\047\034\004\037\043\040\013\001\001\000" +
    "\052\005\042\010\060\011\046\012\041\013\040\014\054" +
    "\015\016\017\030\020\026\021\007\022\017\023\025\024" +
    "\034\025\052\030\003\032\011\033\047\034\004\037\043" +
    "\040\013\001\001\000\002\001\001\000\004\014\254\001" +
    "\001\000\002\001\001\000\054\003\256\005\042\010\015" +
    "\011\046\012\041\013\040\014\054\015\016\017\030\020" +
    "\026\021\007\022\017\023\025\024\034\025\052\030\003" +
    "\032\011\033\047\034\004\037\043\040\013\001\001\000" +
    "\052\005\042\010\060\011\046\012\041\013\040\014\054" +
    "\015\016\017\030\020\026\021\007\022\017\023\025\024" +
    "\034\025\052\030\003\032\011\033\047\034\004\037\043" +
    "\040\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\316\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\274\033\070\035\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\300\033\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\304" +
    "\001\001\000\002\001\001\000\010\031\274\033\070\035" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\274\033\070\035\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\322\026\324\027\325\031\326\033\070" +
    "\001\001\000\012\026\340\027\342\031\326\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\331\005" +
    "\042\010\015\011\046\012\041\013\040\014\054\015\016" +
    "\017\030\020\026\021\007\022\017\023\025\024\034\025" +
    "\052\030\003\032\011\033\047\034\004\037\043\040\013" +
    "\001\001\000\052\005\042\010\060\011\046\012\041\013" +
    "\040\014\054\015\016\017\030\020\026\021\007\022\017" +
    "\023\025\024\034\025\052\030\003\032\011\033\047\034" +
    "\004\037\043\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\336\005\042\010" +
    "\015\011\046\012\041\013\040\014\054\015\016\017\030" +
    "\020\026\021\007\022\017\023\025\024\034\025\052\030" +
    "\003\032\011\033\047\034\004\037\043\040\013\001\001" +
    "\000\052\005\042\010\060\011\046\012\041\013\040\014" +
    "\054\015\016\017\030\020\026\021\007\022\017\023\025" +
    "\024\034\025\052\030\003\032\011\033\047\034\004\037" +
    "\043\040\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\346\001\001\000\002\001\001\000\006\031\347" +
    "\033\070\001\001\000\002\001\001\000\010\016\352\023" +
    "\354\024\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\357\005\042\010\015\011\046\012\041\013\040" +
    "\014\054\015\016\017\030\020\026\021\007\022\017\023" +
    "\025\024\034\025\052\030\003\032\011\033\047\034\004" +
    "\037\043\040\013\001\001\000\052\005\042\010\060\011" +
    "\046\012\041\013\040\014\054\015\016\017\030\020\026" +
    "\021\007\022\017\023\025\024\034\025\052\030\003\032" +
    "\011\033\047\034\004\037\043\040\013\001\001\000\002" +
    "\001\001\000\006\031\362\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\365\033\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\372\030\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\377\005\042\010\015\011\046\012\041" +
    "\013\040\014\054\015\016\017\030\020\026\021\007\022" +
    "\017\023\025\024\034\025\052\030\003\032\011\033\047" +
    "\034\004\037\043\040\013\001\001\000\052\005\042\010" +
    "\060\011\046\012\041\013\040\014\054\015\016\017\030" +
    "\020\026\021\007\022\017\023\025\024\034\025\052\030" +
    "\003\032\011\033\047\034\004\037\043\040\013\001\001" +
    "\000\002\001\001\000\004\030\u0106\001\001\000\002\001" +
    "\001\000\054\003\u0104\005\042\010\015\011\046\012\041" +
    "\013\040\014\054\015\016\017\030\020\026\021\007\022" +
    "\017\023\025\024\034\025\052\030\003\032\011\033\047" +
    "\034\004\037\043\040\013\001\001\000\052\005\042\010" +
    "\060\011\046\012\041\013\040\014\054\015\016\017\030" +
    "\020\026\021\007\022\017\023\025\024\034\025\052\030" +
    "\003\032\011\033\047\034\004\037\043\040\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public static LinkedList<Errores> listaErrores = new LinkedList<>();
    public static boolean elseinstr = true;

    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("Error Sintactico Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("Error Sintactico no Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= IWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= IDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ISTARTWITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECLARACIONVECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= IRETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(b, c, a,d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                    Nativo c = new Nativo(tipoDato.NULL, a, aleft, aright);
                RESULT = new Declaracion(b,c, a,d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= ID CORCHE1 EXPRESION CORCHE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, c, b,null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID CORCHE1 EXPRESION CORCHE2 CORCHE1 EXPRESION CORCHE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, d, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ISTARTWITH ::= STARTWITH ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTARTWITH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ISTARTWITH ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTARTWITH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONVECTORES ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHE1 CORCHE2 IGUAL CORCHE1 VECTORESLISTA CORCHE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        RESULT = new DeclaracionVectores(a, b, c, d,null, 1,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTORES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONVECTORES ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHE1 CORCHE2 CORCHE1 CORCHE2 IGUAL CORCHE1 VECTORESLISTADOSDIMENSIONES CORCHE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        RESULT = new DeclaracionVectores(a, b, c,null, d, 2,aleft, aright);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTORES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VECTORESLISTA ::= VECTORESLISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VECTORESLISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VECTORESLISTADOSDIMENSIONES ::= VECTORESLISTADOSDIMENSIONES COMA CORCHE1 VECTORESLISTA CORCHE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTADOSDIMENSIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VECTORESLISTADOSDIMENSIONES ::= CORCHE1 VECTORESLISTA CORCHE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                    RESULT = new LinkedList<LinkedList<Instruccion>>(); LinkedList<Instruccion> aux = new LinkedList<>(); aux = a; RESULT.add(aux); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTADOSDIMENSIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACIONLISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionLista(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new If(a,b,null,null, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new If(a,b,c,null, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE IIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new If(a,b,null,c, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTFOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a,b,c,d,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ACTFOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ACTFOR ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ACTFOR ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IRETURN ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IRETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IRETURN ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		 


                            RESULT = new Return(null, 0, 0); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IRETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INCREMENTO ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECREMENTO ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDOWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IMATCH ::= MATCH EXPRESION LLAVE1 CASOS DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casos c = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IMATCH ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IMATCH ::= MATCH EXPRESION LLAVE1 DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casos c = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, null, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASOS ::= CASOS CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASOS ::= CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASO ::= EXPRESION FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Casos(a, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEFAULT ::= BARRABAJA FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Casos(null, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteos(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT= new AccesoVar(a, aleft,aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= ID CORCHE1 EXPRESION CORCHE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b,null, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= ID CORCHE1 EXPRESION CORCHE2 CORCHE1 EXPRESION CORCHE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
