
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import abstracto.Casos;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Metodo;
import instrucciones.StartWith;
import instrucciones.Llamada;
import instrucciones.DeclaracionVectores;
import instrucciones.AsignacionVec;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionList;
import instrucciones.Append;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Casteos;
import expresiones.Return;
import expresiones.AccesoVec;
import expresiones.AccesoList;
import expresiones.Remove;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\011\007\000\002\012\011\000\002\012\007\000\002\013" +
    "\006\000\002\013\011\000\002\013\014\000\002\032\012" +
    "\000\002\032\011\000\002\033\007\000\002\033\006\000" +
    "\002\004\006\000\002\004\004\000\002\005\010\000\002" +
    "\005\007\000\002\006\005\000\002\006\003\000\002\034" +
    "\015\000\002\034\017\000\002\035\005\000\002\035\003" +
    "\000\002\036\007\000\002\036\005\000\002\040\015\000" +
    "\002\041\011\000\002\014\011\000\002\014\015\000\002" +
    "\014\013\000\002\015\014\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\021\004\000\002\022\004" +
    "\000\002\037\005\000\002\037\004\000\002\023\005\000" +
    "\002\024\005\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\017\011\000\002\020\013\000\002\025\010" +
    "\000\002\025\007\000\002\025\007\000\002\007\004\000" +
    "\002\007\003\000\002\026\007\000\002\027\007\000\002" +
    "\031\004\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\031\004\000\002\031\006\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\006\000\002" +
    "\031\011\000\002\031\010\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\052\003\040\011\033\012\026\014\007\015" +
    "\015\016\011\017\053\020\006\021\025\023\031\025\021" +
    "\060\041\061\013\062\047\063\056\064\023\065\042\066" +
    "\036\071\034\073\050\001\002\000\004\011\u0106\001\002" +
    "\000\056\002\uffee\003\uffee\011\uffee\012\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\023\uffee\025\uffee" +
    "\040\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\071\uffee\073\uffee\001\002\000\016\011\uffc0" +
    "\013\uffc0\027\uffc0\045\uffc0\047\uffc0\067\uffc0\001\002\000" +
    "\004\026\u0102\001\002\000\056\002\ufff8\003\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\023\ufff8\025\ufff8\040\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\071\ufff8\073\ufff8\001" +
    "\002\000\016\011\uffc2\013\uffc2\027\uffc2\045\uffc2\047\uffc2" +
    "\067\uffc2\001\002\000\056\002\ufff1\003\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\025\ufff1\040\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\071\ufff1\073\ufff1\001\002" +
    "\000\004\013\u0101\001\002\000\056\002\uffec\003\uffec\011" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\023\uffec\025\uffec\040\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\071\uffec\073\uffec" +
    "\001\002\000\016\011\uffc3\013\uffc3\027\uffc3\045\uffc3\047" +
    "\uffc3\067\uffc3\001\002\000\056\002\ufffe\003\ufffe\011\ufffe" +
    "\012\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\025\ufffe\040\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\071\ufffe\073\ufffe\001" +
    "\002\000\056\002\ufff9\003\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\025" +
    "\ufff9\040\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\071\ufff9\073\ufff9\001\002\000\056\002" +
    "\ufff7\003\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\023\ufff7\025\ufff7\040\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\071\ufff7\073\ufff7\001\002\000\004\026\362\001\002\000" +
    "\054\002\000\003\040\011\033\012\026\014\007\015\015" +
    "\016\011\017\053\020\006\021\025\023\031\025\021\060" +
    "\041\061\013\062\047\063\056\064\023\065\042\066\036" +
    "\071\034\073\050\001\002\000\024\004\066\005\072\006" +
    "\067\007\071\010\100\011\075\026\074\031\070\056\076" +
    "\001\002\000\056\002\uffea\003\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea" +
    "\025\uffea\040\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\071\uffea\073\uffea\001\002\000\016" +
    "\011\uffbf\013\uffbf\027\uffbf\045\uffbf\047\uffbf\067\uffbf\001" +
    "\002\000\004\011\277\001\002\000\004\013\276\001\002" +
    "\000\056\002\ufff3\003\ufff3\011\ufff3\012\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\025\ufff3" +
    "\040\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\071\ufff3\073\ufff3\001\002\000\004\026\263" +
    "\001\002\000\056\002\ufff4\003\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4" +
    "\025\ufff4\040\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\071\ufff4\073\ufff4\001\002\000\016" +
    "\026\144\030\233\031\236\047\234\053\232\067\235\001" +
    "\002\000\026\004\066\005\072\006\067\007\071\010\100" +
    "\011\075\013\227\026\074\031\070\056\076\001\002\000" +
    "\056\002\uffeb\003\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\025\uffeb\040" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\071\uffeb\073\uffeb\001\002\000\004\011\220\001" +
    "\002\000\004\013\217\001\002\000\004\013\216\001\002" +
    "\000\004\013\215\001\002\000\016\011\uffbe\013\uffbe\027" +
    "\uffbe\045\uffbe\047\uffbe\067\uffbe\001\002\000\056\002\ufffb" +
    "\003\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\023\ufffb\025\ufffb\040\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\071" +
    "\ufffb\073\ufffb\001\002\000\056\002\ufffc\003\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\023\ufffc\025\ufffc\040\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\071\ufffc\073\ufffc\001" +
    "\002\000\056\002\ufff0\003\ufff0\011\ufff0\012\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\025" +
    "\ufff0\040\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\071\ufff0\073\ufff0\001\002\000\056\002" +
    "\uffed\003\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\023\uffed\025\uffed\040\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\071\uffed\073\uffed\001\002\000\004\026\207\001\002\000" +
    "\004\044\175\001\002\000\056\002\ufffd\003\ufffd\011\ufffd" +
    "\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\023\ufffd\025\ufffd\040\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\066\ufffd\071\ufffd\073\ufffd\001" +
    "\002\000\056\002\uffef\003\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef\025" +
    "\uffef\040\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\071\uffef\073\uffef\001\002\000\016\011" +
    "\uffc1\013\uffc1\027\uffc1\045\uffc1\047\uffc1\067\uffc1\001\002" +
    "\000\004\002\174\001\002\000\056\002\ufff2\003\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\023\ufff2\025\ufff2\040\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\073\ufff2" +
    "\001\002\000\004\037\060\001\002\000\056\002\ufffa\003" +
    "\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\023\ufffa\025\ufffa\040\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\071\ufffa" +
    "\073\ufffa\001\002\000\052\003\040\011\033\012\026\014" +
    "\007\015\015\016\011\017\053\020\006\021\025\023\031" +
    "\025\021\060\041\061\013\062\047\063\056\064\023\065" +
    "\042\066\036\071\034\073\050\001\002\000\054\003\040" +
    "\011\033\012\026\014\007\015\015\016\011\017\053\020" +
    "\006\021\025\023\031\025\021\040\062\060\041\061\013" +
    "\062\047\063\056\064\023\065\042\066\036\071\034\073" +
    "\050\001\002\000\004\062\064\001\002\000\056\002\uffff" +
    "\003\uffff\011\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\023\uffff\025\uffff\040\uffff\060\uffff" +
    "\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\071" +
    "\uffff\073\uffff\001\002\000\004\026\065\001\002\000\024" +
    "\004\066\005\072\006\067\007\071\010\100\011\075\026" +
    "\074\031\070\056\076\001\002\000\054\013\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\050\uff9f\052\uff9f\054\uff9f\055\uff9f\057\uff9f\070\uff9f\001" +
    "\002\000\054\013\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\052\uffa0\054\uffa0" +
    "\055\uffa0\057\uffa0\070\uffa0\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\054\013\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\052" +
    "\uff9e\054\uff9e\055\uff9e\057\uff9e\070\uff9e\001\002\000\054" +
    "\013\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\050\uffa1\052\uffa1\054\uffa1\055\uffa1\057" +
    "\uffa1\070\uffa1\001\002\000\054\013\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4" +
    "\052\uffa4\054\uffa4\055\uffa4\057\uffa4\070\uffa4\001\002\000" +
    "\040\004\066\005\072\006\067\007\071\010\100\011\075" +
    "\015\015\016\011\017\053\020\006\021\025\026\074\031" +
    "\070\056\076\065\042\001\002\000\062\013\uff9c\026\144" +
    "\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\050\uff9c\052\uff9c\053\142\054\uff9c\055\uff9c\057" +
    "\uff9c\067\143\070\uff9c\001\002\000\024\004\066\005\072" +
    "\006\067\007\071\010\100\011\075\026\074\031\070\056" +
    "\076\001\002\000\042\027\112\030\111\031\103\033\104" +
    "\034\107\035\115\036\114\041\116\042\106\043\110\044" +
    "\105\045\113\046\117\054\120\055\101\057\102\001\002" +
    "\000\054\013\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\050\uff9d\052\uff9d\054\uff9d\055" +
    "\uff9d\057\uff9d\070\uff9d\001\002\000\024\004\066\005\072" +
    "\006\067\007\071\010\100\011\075\026\074\031\070\056" +
    "\076\001\002\000\024\004\066\005\072\006\067\007\071" +
    "\010\100\011\075\026\074\031\070\056\076\001\002\000" +
    "\024\004\066\005\072\006\067\007\071\010\100\011\075" +
    "\026\074\031\070\056\076\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\024\004\066\005\072\006\067\007" +
    "\071\010\100\011\075\026\074\031\070\056\076\001\002" +
    "\000\024\004\066\005\072\006\067\007\071\010\100\011" +
    "\075\026\074\031\070\056\076\001\002\000\024\004\066" +
    "\005\072\006\067\007\071\010\100\011\075\026\074\031" +
    "\070\056\076\001\002\000\024\004\066\005\072\006\067" +
    "\007\071\010\100\011\075\026\074\031\070\056\076\001" +
    "\002\000\024\004\066\005\072\006\067\007\071\010\100" +
    "\011\075\026\074\031\070\056\076\001\002\000\004\013" +
    "\127\001\002\000\024\004\066\005\072\006\067\007\071" +
    "\010\100\011\075\026\074\031\070\056\076\001\002\000" +
    "\024\004\066\005\072\006\067\007\071\010\100\011\075" +
    "\026\074\031\070\056\076\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\024\004\066\005\072\006\067\007" +
    "\071\010\100\011\075\026\074\031\070\056\076\001\002" +
    "\000\024\004\066\005\072\006\067\007\071\010\100\011" +
    "\075\026\074\031\070\056\076\001\002\000\024\004\066" +
    "\005\072\006\067\007\071\010\100\011\075\026\074\031" +
    "\070\056\076\001\002\000\054\013\uffa7\027\uffa7\030\111" +
    "\031\103\033\104\034\107\035\115\036\114\037\uffa7\041" +
    "\116\042\106\043\110\044\105\045\113\046\117\050\uffa7" +
    "\052\uffa7\054\uffa7\055\101\057\102\070\uffa7\001\002\000" +
    "\054\013\uffa8\027\uffa8\030\111\031\103\033\104\034\107" +
    "\035\115\036\114\037\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\050\uffa8\052\uffa8\054\uffa8\055\uffa8" +
    "\057\uffa8\070\uffa8\001\002\000\054\013\uffad\027\uffad\030" +
    "\111\031\103\033\104\034\107\035\115\036\114\037\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050" +
    "\uffad\052\uffad\054\uffad\055\uffad\057\uffad\070\uffad\001\002" +
    "\000\054\013\uffb0\027\uffb0\030\uffb0\031\uffb0\033\104\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\050\uffb0\052\uffb0\054\uffb0\055" +
    "\uffb0\057\uffb0\070\uffb0\001\002\000\054\013\uffae\027\uffae" +
    "\030\uffae\031\uffae\033\104\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\050\uffae\052\uffae\054\uffae\055\uffae\057\uffae\070\uffae\001" +
    "\002\000\054\013\uffa9\027\uffa9\030\111\031\103\033\104" +
    "\034\107\035\115\036\114\037\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\052\uffa9\054\uffa9" +
    "\055\uffa9\057\uffa9\070\uffa9\001\002\000\056\002\uffbc\003" +
    "\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\025\uffbc\040\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\071\uffbc" +
    "\073\uffbc\001\002\000\054\013\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\033\104\034\107\035\115\036\114\037\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\057\uffb3\070\uffb3\001\002\000\054" +
    "\013\uffab\027\uffab\030\111\031\103\033\104\034\107\035" +
    "\115\036\114\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\050\uffab\052\uffab\054\uffab\055\uffab\057" +
    "\uffab\070\uffab\001\002\000\054\013\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\104\034\uffb1\035\uffb1\036\uffb1\037\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1" +
    "\052\uffb1\054\uffb1\055\uffb1\057\uffb1\070\uffb1\001\002\000" +
    "\054\013\uffac\027\uffac\030\111\031\103\033\104\034\107" +
    "\035\115\036\114\037\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\050\uffac\052\uffac\054\uffac\055\uffac" +
    "\057\uffac\070\uffac\001\002\000\054\013\uffaa\027\uffaa\030" +
    "\111\031\103\033\104\034\107\035\115\036\114\037\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050" +
    "\uffaa\052\uffaa\054\uffaa\055\uffaa\057\uffaa\070\uffaa\001\002" +
    "\000\054\013\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\050\uffaf\052\uffaf\054\uffaf\055" +
    "\uffaf\057\uffaf\070\uffaf\001\002\000\054\013\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\104\034\107\035\115\036\114\037" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\050\uffb2\052\uffb2\054\uffb2\055\uffb2\057\uffb2\070\uffb2\001" +
    "\002\000\054\013\uffa5\027\uffa5\030\111\031\103\033\104" +
    "\034\107\035\115\036\114\037\uffa5\041\116\042\106\043" +
    "\110\044\105\045\113\046\117\050\uffa5\052\uffa5\054\uffa5" +
    "\055\uffa5\057\uffa5\070\uffa5\001\002\000\054\013\uffa6\027" +
    "\uffa6\030\111\031\103\033\104\034\107\035\115\036\114" +
    "\037\uffa6\041\116\042\106\043\110\044\105\045\113\046" +
    "\117\050\uffa6\052\uffa6\054\uffa6\055\uffa6\057\102\070\uffa6" +
    "\001\002\000\054\013\uffa3\027\uffa3\030\111\031\103\033" +
    "\104\034\107\035\115\036\114\037\uffa3\041\116\042\106" +
    "\043\110\044\105\045\113\046\117\050\uffa3\052\uffa3\054" +
    "\uffa3\055\uffa3\057\uffa3\070\uffa3\001\002\000\004\075\162" +
    "\001\002\000\024\004\066\005\072\006\067\007\071\010" +
    "\100\011\075\026\074\031\070\056\076\001\002\000\026" +
    "\004\066\005\072\006\067\007\071\010\100\011\075\026" +
    "\074\027\145\031\070\056\076\001\002\000\004\013\154" +
    "\001\002\000\006\027\151\052\150\001\002\000\044\027" +
    "\uffd9\030\111\031\103\033\104\034\107\035\115\036\114" +
    "\041\116\042\106\043\110\044\105\045\113\046\117\052" +
    "\uffd9\054\120\055\101\057\102\001\002\000\024\004\066" +
    "\005\072\006\067\007\071\010\100\011\075\026\074\031" +
    "\070\056\076\001\002\000\004\013\152\001\002\000\130" +
    "\002\uffe0\003\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\025\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\050\uffe0\052\uffe0\054\uffe0\055\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\070\uffe0\071\uffe0\073\uffe0\001\002\000\044\027" +
    "\uffda\030\111\031\103\033\104\034\107\035\115\036\114" +
    "\041\116\042\106\043\110\044\105\045\113\046\117\052" +
    "\uffda\054\120\055\101\057\102\001\002\000\130\002\uffdf" +
    "\003\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\025\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\050\uffdf\052\uffdf\054\uffdf\055\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\001\002\000\042\030\111\031" +
    "\103\033\104\034\107\035\115\036\114\041\116\042\106" +
    "\043\110\044\105\045\113\046\117\054\120\055\101\057" +
    "\102\070\156\001\002\000\056\013\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b" +
    "\052\uff9b\054\uff9b\055\uff9b\057\uff9b\067\157\070\uff9b\001" +
    "\002\000\024\004\066\005\072\006\067\007\071\010\100" +
    "\011\075\026\074\031\070\056\076\001\002\000\042\030" +
    "\111\031\103\033\104\034\107\035\115\036\114\041\116" +
    "\042\106\043\110\044\105\045\113\046\117\054\120\055" +
    "\101\057\102\070\161\001\002\000\054\013\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\050\uff9a\052\uff9a\054\uff9a\055\uff9a\057\uff9a\070\uff9a\001" +
    "\002\000\004\026\163\001\002\000\024\004\066\005\072" +
    "\006\067\007\071\010\100\011\075\026\074\031\070\056" +
    "\076\001\002\000\042\027\165\030\111\031\103\033\104" +
    "\034\107\035\115\036\114\041\116\042\106\043\110\044" +
    "\105\045\113\046\117\054\120\055\101\057\102\001\002" +
    "\000\054\013\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\050\uff99\052\uff99\054\uff99\055" +
    "\uff99\057\uff99\070\uff99\001\002\000\004\027\171\001\002" +
    "\000\042\027\170\030\111\031\103\033\104\034\107\035" +
    "\115\036\114\041\116\042\106\043\110\044\105\045\113" +
    "\046\117\054\120\055\101\057\102\001\002\000\054\013" +
    "\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\050\uff98\052\uff98\054\uff98\055\uff98\057\uff98" +
    "\070\uff98\001\002\000\024\004\066\005\072\006\067\007" +
    "\071\010\100\011\075\026\074\031\070\056\076\001\002" +
    "\000\054\013\uffa2\027\uffa2\030\111\031\103\033\104\034" +
    "\107\035\115\036\114\037\uffa2\041\116\042\106\043\110" +
    "\044\105\045\113\046\117\050\uffa2\052\uffa2\054\120\055" +
    "\101\057\102\070\uffa2\001\002\000\054\013\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\052\uffb4\054\uffb4\055\uffb4\057\uffb4\070\uffb4\001" +
    "\002\000\004\002\001\001\002\000\016\015\015\016\011" +
    "\017\053\020\006\021\025\065\042\001\002\000\004\045" +
    "\177\001\002\000\004\011\200\001\002\000\004\047\201" +
    "\001\002\000\004\072\202\001\002\000\004\073\203\001" +
    "\002\000\004\026\204\001\002\000\004\027\205\001\002" +
    "\000\004\013\206\001\002\000\056\002\uffd2\003\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\023\uffd2\025\uffd2\040\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\071\uffd2\073\uffd2" +
    "\001\002\000\024\004\066\005\072\006\067\007\071\010" +
    "\100\011\075\026\074\031\070\056\076\001\002\000\042" +
    "\027\211\030\111\031\103\033\104\034\107\035\115\036" +
    "\114\041\116\042\106\043\110\044\105\045\113\046\117" +
    "\054\120\055\101\057\102\001\002\000\004\037\212\001" +
    "\002\000\052\003\040\011\033\012\026\014\007\015\015" +
    "\016\011\017\053\020\006\021\025\023\031\025\021\060" +
    "\041\061\013\062\047\063\056\064\023\065\042\066\036" +
    "\071\034\073\050\001\002\000\054\003\040\011\033\012" +
    "\026\014\007\015\015\016\011\017\053\020\006\021\025" +
    "\023\031\025\021\040\214\060\041\061\013\062\047\063" +
    "\056\064\023\065\042\066\036\071\034\073\050\001\002" +
    "\000\056\002\uffbd\003\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\025\uffbd" +
    "\040\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\071\uffbd\073\uffbd\001\002\000\056\002\uffc9" +
    "\003\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\023\uffc9\025\uffc9\040\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\071" +
    "\uffc9\073\uffc9\001\002\000\056\002\uffe9\003\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\023\uffe9\025\uffe9\040\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\071\uffe9\073\uffe9\001" +
    "\002\000\056\002\ufff5\003\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\025" +
    "\ufff5\040\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\071\ufff5\073\ufff5\001\002\000\004\026" +
    "\221\001\002\000\026\004\066\005\072\006\067\007\071" +
    "\010\100\011\075\026\074\027\222\031\070\056\076\001" +
    "\002\000\004\013\226\001\002\000\006\027\224\052\150" +
    "\001\002\000\004\013\225\001\002\000\056\002\uffdc\003" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\023\uffdc\025\uffdc\040\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\071\uffdc" +
    "\073\uffdc\001\002\000\056\002\uffdb\003\uffdb\011\uffdb\012" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\023\uffdb\025\uffdb\040\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\071\uffdb\073\uffdb\001\002" +
    "\000\056\002\uffc6\003\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\025\uffc6" +
    "\040\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\071\uffc6\073\uffc6\001\002\000\042\013\231" +
    "\030\111\031\103\033\104\034\107\035\115\036\114\041" +
    "\116\042\106\043\110\044\105\045\113\046\117\054\120" +
    "\055\101\057\102\001\002\000\056\002\uffc7\003\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\025\uffc7\040\uffc7\060\uffc7\061\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\071\uffc7\073\uffc7" +
    "\001\002\000\004\074\256\001\002\000\004\030\255\001" +
    "\002\000\024\004\066\005\072\006\067\007\071\010\100" +
    "\011\075\026\074\031\070\056\076\001\002\000\024\004" +
    "\066\005\072\006\067\007\071\010\100\011\075\026\074" +
    "\031\070\056\076\001\002\000\004\031\237\001\002\000" +
    "\006\013\uffc4\027\uffc4\001\002\000\042\030\111\031\103" +
    "\033\104\034\107\035\115\036\114\041\116\042\106\043" +
    "\110\044\105\045\113\046\117\054\120\055\101\057\102" +
    "\070\241\001\002\000\006\047\243\067\242\001\002\000" +
    "\024\004\066\005\072\006\067\007\071\010\100\011\075" +
    "\026\074\031\070\056\076\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\042\013\245\030\111\031\103\033" +
    "\104\034\107\035\115\036\114\041\116\042\106\043\110" +
    "\044\105\045\113\046\117\054\120\055\101\057\102\001" +
    "\002\000\076\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\025\uffe4\026\uffe4" +
    "\031\uffe4\040\uffe4\056\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\071\uffe4\073\uffe4\001\002" +
    "\000\042\030\111\031\103\033\104\034\107\035\115\036" +
    "\114\041\116\042\106\043\110\044\105\045\113\046\117" +
    "\054\120\055\101\057\102\070\247\001\002\000\004\047" +
    "\250\001\002\000\024\004\066\005\072\006\067\007\071" +
    "\010\100\011\075\026\074\031\070\056\076\001\002\000" +
    "\042\013\252\030\111\031\103\033\104\034\107\035\115" +
    "\036\114\041\116\042\106\043\110\044\105\045\113\046" +
    "\117\054\120\055\101\057\102\001\002\000\076\002\uffe3" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\025\uffe3\026\uffe3\031\uffe3\040\uffe3\056" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\071\uffe3\073\uffe3\001\002\000\042\013\254\030" +
    "\111\031\103\033\104\034\107\035\115\036\114\041\116" +
    "\042\106\043\110\044\105\045\113\046\117\054\120\055" +
    "\101\057\102\001\002\000\076\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5" +
    "\025\uffe5\026\uffe5\031\uffe5\040\uffe5\056\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5" +
    "\073\uffe5\001\002\000\006\013\uffc5\027\uffc5\001\002\000" +
    "\004\026\257\001\002\000\024\004\066\005\072\006\067" +
    "\007\071\010\100\011\075\026\074\031\070\056\076\001" +
    "\002\000\042\027\261\030\111\031\103\033\104\034\107" +
    "\035\115\036\114\041\116\042\106\043\110\044\105\045" +
    "\113\046\117\054\120\055\101\057\102\001\002\000\004" +
    "\013\262\001\002\000\056\002\uffd1\003\uffd1\011\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\025\uffd1\040\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\071\uffd1\073\uffd1\001\002" +
    "\000\024\004\066\005\072\006\067\007\071\010\100\011" +
    "\075\026\074\031\070\056\076\001\002\000\042\027\265" +
    "\030\111\031\103\033\104\034\107\035\115\036\114\041" +
    "\116\042\106\043\110\044\105\045\113\046\117\054\120" +
    "\055\101\057\102\001\002\000\004\037\266\001\002\000" +
    "\052\003\040\011\033\012\026\014\007\015\015\016\011" +
    "\017\053\020\006\021\025\023\031\025\021\060\041\061" +
    "\013\062\047\063\056\064\023\065\042\066\036\071\034" +
    "\073\050\001\002\000\054\003\040\011\033\012\026\014" +
    "\007\015\015\016\011\017\053\020\006\021\025\023\031" +
    "\025\021\040\270\060\041\061\013\062\047\063\056\064" +
    "\023\065\042\066\036\071\034\073\050\001\002\000\060" +
    "\002\uffd0\003\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\271\025\uffd0" +
    "\040\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\071\uffd0\073\uffd0\001\002\000\006\023\031" +
    "\037\273\001\002\000\056\002\uffce\003\uffce\011\uffce\012" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\023\uffce\025\uffce\040\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\071\uffce\073\uffce\001\002" +
    "\000\052\003\040\011\033\012\026\014\007\015\015\016" +
    "\011\017\053\020\006\021\025\023\031\025\021\060\041" +
    "\061\013\062\047\063\056\064\023\065\042\066\036\071" +
    "\034\073\050\001\002\000\054\003\040\011\033\012\026" +
    "\014\007\015\015\016\011\017\053\020\006\021\025\023" +
    "\031\025\021\040\275\060\041\061\013\062\047\063\056" +
    "\064\023\065\042\066\036\071\034\073\050\001\002\000" +
    "\056\002\uffcf\003\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\025\uffcf\040" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\071\uffcf\073\uffcf\001\002\000\056\002\ufff6\003" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\025\ufff6\040\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6" +
    "\073\ufff6\001\002\000\004\022\300\001\002\000\016\015" +
    "\015\016\011\017\053\020\006\021\025\065\042\001\002" +
    "\000\010\013\302\047\304\067\303\001\002\000\056\002" +
    "\uffe6\003\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\025\uffe6\040\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\071\uffe6\073\uffe6\001\002\000\004\070\307\001\002\000" +
    "\024\004\066\005\072\006\067\007\071\010\100\011\075" +
    "\026\074\031\070\056\076\001\002\000\042\013\306\030" +
    "\111\031\103\033\104\034\107\035\115\036\114\041\116" +
    "\042\106\043\110\044\105\045\113\046\117\054\120\055" +
    "\101\057\102\001\002\000\056\002\uffe7\003\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\025\uffe7\040\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\066\uffe7\071\uffe7\073\uffe7\001" +
    "\002\000\006\047\310\067\311\001\002\000\004\067\332" +
    "\001\002\000\004\070\312\001\002\000\004\047\313\001" +
    "\002\000\004\067\314\001\002\000\004\067\316\001\002" +
    "\000\006\052\324\070\325\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\006\052\321\070\322\001\002\000" +
    "\044\030\111\031\103\033\104\034\107\035\115\036\114" +
    "\041\116\042\106\043\110\044\105\045\113\046\117\052" +
    "\uffd5\054\120\055\101\057\102\070\uffd5\001\002\000\024" +
    "\004\066\005\072\006\067\007\071\010\100\011\075\026" +
    "\074\031\070\056\076\001\002\000\006\052\uffd3\070\uffd3" +
    "\001\002\000\044\030\111\031\103\033\104\034\107\035" +
    "\115\036\114\041\116\042\106\043\110\044\105\045\113" +
    "\046\117\052\uffd6\054\120\055\101\057\102\070\uffd6\001" +
    "\002\000\004\067\327\001\002\000\004\013\326\001\002" +
    "\000\056\002\uffd7\003\uffd7\011\uffd7\012\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\025\uffd7" +
    "\040\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\071\uffd7\073\uffd7\001\002\000\024\004\066" +
    "\005\072\006\067\007\071\010\100\011\075\026\074\031" +
    "\070\056\076\001\002\000\006\052\321\070\331\001\002" +
    "\000\006\052\uffd4\070\uffd4\001\002\000\024\004\066\005" +
    "\072\006\067\007\071\010\100\011\075\026\074\031\070" +
    "\056\076\001\002\000\006\052\321\070\334\001\002\000" +
    "\004\013\335\001\002\000\056\002\uffd8\003\uffd8\011\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\023\uffd8\025\uffd8\040\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\071\uffd8\073\uffd8\001" +
    "\002\000\042\030\111\031\103\033\104\034\107\035\115" +
    "\036\114\037\337\041\116\042\106\043\110\044\105\045" +
    "\113\046\117\054\120\055\101\057\102\001\002\000\026" +
    "\004\066\005\072\006\067\007\071\010\100\011\075\026" +
    "\074\031\070\051\341\056\076\001\002\000\030\004\066" +
    "\005\072\006\067\007\071\010\100\011\075\026\074\031" +
    "\070\040\356\051\341\056\076\001\002\000\004\050\352" +
    "\001\002\000\030\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\026\uffb7\031\uffb7\040\uffb7\051\uffb7\056\uffb7" +
    "\001\002\000\004\040\351\001\002\000\042\030\111\031" +
    "\103\033\104\034\107\035\115\036\114\041\116\042\106" +
    "\043\110\044\105\045\113\046\117\050\345\054\120\055" +
    "\101\057\102\001\002\000\004\037\346\001\002\000\052" +
    "\003\040\011\033\012\026\014\007\015\015\016\011\017" +
    "\053\020\006\021\025\023\031\025\021\060\041\061\013" +
    "\062\047\063\056\064\023\065\042\066\036\071\034\073" +
    "\050\001\002\000\054\003\040\011\033\012\026\014\007" +
    "\015\015\016\011\017\053\020\006\021\025\023\031\025" +
    "\021\040\350\060\041\061\013\062\047\063\056\064\023" +
    "\065\042\066\036\071\034\073\050\001\002\000\030\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\026\uffb6" +
    "\031\uffb6\040\uffb6\051\uffb6\056\uffb6\001\002\000\056\002" +
    "\uffb9\003\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\023\uffb9\025\uffb9\040\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\071\uffb9\073\uffb9\001\002\000\004\037\353\001\002\000" +
    "\052\003\040\011\033\012\026\014\007\015\015\016\011" +
    "\017\053\020\006\021\025\023\031\025\021\060\041\061" +
    "\013\062\047\063\056\064\023\065\042\066\036\071\034" +
    "\073\050\001\002\000\054\003\040\011\033\012\026\014" +
    "\007\015\015\016\011\017\053\020\006\021\025\023\031" +
    "\025\021\040\355\060\041\061\013\062\047\063\056\064" +
    "\023\065\042\066\036\071\034\073\050\001\002\000\004" +
    "\040\uffb5\001\002\000\056\002\uffba\003\uffba\011\uffba\012" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\023\uffba\025\uffba\040\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\071\uffba\073\uffba\001\002" +
    "\000\030\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\026\uffb8\031\uffb8\040\uffb8\051\uffb8\056\uffb8\001\002" +
    "\000\004\040\361\001\002\000\056\002\uffbb\003\uffbb\011" +
    "\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\023\uffbb\025\uffbb\040\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\071\uffbb\073\uffbb" +
    "\001\002\000\004\011\363\001\002\000\006\047\234\067" +
    "\235\001\002\000\024\004\066\005\072\006\067\007\071" +
    "\010\100\011\075\026\074\031\070\056\076\001\002\000" +
    "\042\013\366\030\111\031\103\033\104\034\107\035\115" +
    "\036\114\041\116\042\106\043\110\044\105\045\113\046" +
    "\117\054\120\055\101\057\102\001\002\000\004\011\367" +
    "\001\002\000\010\030\233\031\236\047\377\001\002\000" +
    "\004\027\uffca\001\002\000\004\027\373\001\002\000\004" +
    "\027\uffcb\001\002\000\004\037\374\001\002\000\052\003" +
    "\040\011\033\012\026\014\007\015\015\016\011\017\053" +
    "\020\006\021\025\023\031\025\021\060\041\061\013\062" +
    "\047\063\056\064\023\065\042\066\036\071\034\073\050" +
    "\001\002\000\054\003\040\011\033\012\026\014\007\015" +
    "\015\016\011\017\053\020\006\021\025\023\031\025\021" +
    "\040\376\060\041\061\013\062\047\063\056\064\023\065" +
    "\042\066\036\071\034\073\050\001\002\000\056\002\uffcd" +
    "\003\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\025\uffcd\040\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\071" +
    "\uffcd\073\uffcd\001\002\000\024\004\066\005\072\006\067" +
    "\007\071\010\100\011\075\026\074\031\070\056\076\001" +
    "\002\000\042\027\uffcc\030\111\031\103\033\104\034\107" +
    "\035\115\036\114\041\116\042\106\043\110\044\105\045" +
    "\113\046\117\054\120\055\101\057\102\001\002\000\056" +
    "\002\uffc8\003\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\025\uffc8\040\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\071\uffc8\073\uffc8\001\002\000\024\004\066\005\072" +
    "\006\067\007\071\010\100\011\075\026\074\031\070\056" +
    "\076\001\002\000\042\027\u0104\030\111\031\103\033\104" +
    "\034\107\035\115\036\114\041\116\042\106\043\110\044" +
    "\105\045\113\046\117\054\120\055\101\057\102\001\002" +
    "\000\004\013\u0105\001\002\000\056\002\uffe8\003\uffe8\011" +
    "\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\023\uffe8\025\uffe8\040\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\071\uffe8\073\uffe8" +
    "\001\002\000\004\026\u0107\001\002\000\020\015\015\016" +
    "\011\017\053\020\006\021\025\027\u0109\065\042\001\002" +
    "\000\006\027\u0110\052\u010f\001\002\000\004\037\u010c\001" +
    "\002\000\004\011\u010b\001\002\000\006\027\uffdd\052\uffdd" +
    "\001\002\000\052\003\040\011\033\012\026\014\007\015" +
    "\015\016\011\017\053\020\006\021\025\023\031\025\021" +
    "\060\041\061\013\062\047\063\056\064\023\065\042\066" +
    "\036\071\034\073\050\001\002\000\054\003\040\011\033" +
    "\012\026\014\007\015\015\016\011\017\053\020\006\021" +
    "\025\023\031\025\021\040\u010e\060\041\061\013\062\047" +
    "\063\056\064\023\065\042\066\036\071\034\073\050\001" +
    "\002\000\056\002\uffe1\003\uffe1\011\uffe1\012\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\025" +
    "\uffe1\040\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\071\uffe1\073\uffe1\001\002\000\016\015" +
    "\015\016\011\017\053\020\006\021\025\065\042\001\002" +
    "\000\004\037\u0111\001\002\000\052\003\040\011\033\012" +
    "\026\014\007\015\015\016\011\017\053\020\006\021\025" +
    "\023\031\025\021\060\041\061\013\062\047\063\056\064" +
    "\023\065\042\066\036\071\034\073\050\001\002\000\054" +
    "\003\040\011\033\012\026\014\007\015\015\016\011\017" +
    "\053\020\006\021\025\023\031\025\021\040\u0113\060\041" +
    "\061\013\062\047\063\056\064\023\065\042\066\036\071" +
    "\034\073\050\001\002\000\056\002\uffe2\003\uffe2\011\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\023\uffe2\025\uffe2\040\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\071\uffe2\073\uffe2\001" +
    "\002\000\004\011\u0115\001\002\000\006\027\uffde\052\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\062\002\053\003\021\005\044\010\015\011" +
    "\050\012\043\013\042\014\056\015\016\017\031\020\027" +
    "\021\007\022\017\023\026\024\036\025\054\030\003\032" +
    "\011\033\051\034\004\037\045\040\013\041\034\042\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\005\044\010\062\011" +
    "\050\012\043\013\042\014\056\015\016\017\031\020\027" +
    "\021\007\022\017\023\026\024\036\025\054\030\003\032" +
    "\011\033\051\034\004\037\045\040\013\041\034\042\023" +
    "\001\001\000\006\031\335\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\227\033\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\060" +
    "\005\044\010\015\011\050\012\043\013\042\014\056\015" +
    "\016\017\031\020\027\021\007\022\017\023\026\024\036" +
    "\025\054\030\003\032\011\033\051\034\004\037\045\040" +
    "\013\041\034\042\023\001\001\000\056\005\044\010\062" +
    "\011\050\012\043\013\042\014\056\015\016\017\031\020" +
    "\027\021\007\022\017\023\026\024\036\025\054\030\003" +
    "\032\011\033\051\034\004\037\045\040\013\041\034\042" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\076\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\172\033\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\165\031\166\033\072\001\001\000\002\001\001" +
    "\000\006\031\140\033\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\137\033\072\001\001\000\006" +
    "\031\136\033\072\001\001\000\006\031\135\033\072\001" +
    "\001\000\006\031\134\033\072\001\001\000\006\031\133" +
    "\033\072\001\001\000\006\031\132\033\072\001\001\000" +
    "\006\031\131\033\072\001\001\000\006\031\130\033\072" +
    "\001\001\000\006\031\127\033\072\001\001\000\002\001" +
    "\001\000\006\031\125\033\072\001\001\000\006\031\124" +
    "\033\072\001\001\000\006\031\123\033\072\001\001\000" +
    "\006\031\122\033\072\001\001\000\006\031\121\033\072" +
    "\001\001\000\006\031\120\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\154\033\072\001\001\000" +
    "\010\006\145\031\146\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\152\033" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\157\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\163\033" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\171\033\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\207\033\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\212\005\044\010\015\011\050\012\043\013\042\014\056" +
    "\015\016\017\031\020\027\021\007\022\017\023\026\024" +
    "\036\025\054\030\003\032\011\033\051\034\004\037\045" +
    "\040\013\041\034\042\023\001\001\000\056\005\044\010" +
    "\062\011\050\012\043\013\042\014\056\015\016\017\031" +
    "\020\027\021\007\022\017\023\026\024\036\025\054\030" +
    "\003\032\011\033\051\034\004\037\045\040\013\041\034" +
    "\042\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\222\031\146\033\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\252" +
    "\033\072\001\001\000\006\031\237\033\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\245\033\072\001\001\000\006\031" +
    "\243\033\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\250\033" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\257\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\263\033" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\266\005\044\010\015\011\050\012\043\013\042\014" +
    "\056\015\016\017\031\020\027\021\007\022\017\023\026" +
    "\024\036\025\054\030\003\032\011\033\051\034\004\037" +
    "\045\040\013\041\034\042\023\001\001\000\056\005\044" +
    "\010\062\011\050\012\043\013\042\014\056\015\016\017" +
    "\031\020\027\021\007\022\017\023\026\024\036\025\054" +
    "\030\003\032\011\033\051\034\004\037\045\040\013\041" +
    "\034\042\023\001\001\000\002\001\001\000\004\014\271" +
    "\001\001\000\002\001\001\000\060\003\273\005\044\010" +
    "\015\011\050\012\043\013\042\014\056\015\016\017\031" +
    "\020\027\021\007\022\017\023\026\024\036\025\054\030" +
    "\003\032\011\033\051\034\004\037\045\040\013\041\034" +
    "\042\023\001\001\000\056\005\044\010\062\011\050\012" +
    "\043\013\042\014\056\015\016\017\031\020\027\021\007" +
    "\022\017\023\026\024\036\025\054\030\003\032\011\033" +
    "\051\034\004\037\045\040\013\041\034\042\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\304\033\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\314\001\001\000\002\001\001\000\010" +
    "\031\317\033\072\035\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\322\033\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\317\033\072\035\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\317\033\072\035\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\337\026\341\027\342\031\343\033\072\001\001\000\012" +
    "\026\356\027\357\031\343\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\346\005\044\010\015\011" +
    "\050\012\043\013\042\014\056\015\016\017\031\020\027" +
    "\021\007\022\017\023\026\024\036\025\054\030\003\032" +
    "\011\033\051\034\004\037\045\040\013\041\034\042\023" +
    "\001\001\000\056\005\044\010\062\011\050\012\043\013" +
    "\042\014\056\015\016\017\031\020\027\021\007\022\017" +
    "\023\026\024\036\025\054\030\003\032\011\033\051\034" +
    "\004\037\045\040\013\041\034\042\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\353\005\044\010\015\011\050\012\043\013\042\014\056" +
    "\015\016\017\031\020\027\021\007\022\017\023\026\024" +
    "\036\025\054\030\003\032\011\033\051\034\004\037\045" +
    "\040\013\041\034\042\023\001\001\000\056\005\044\010" +
    "\062\011\050\012\043\013\042\014\056\015\016\017\031" +
    "\020\027\021\007\022\017\023\026\024\036\025\054\030" +
    "\003\032\011\033\051\034\004\037\045\040\013\041\034" +
    "\042\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\363\001\001\000\002\001\001\000\006\031\364\033" +
    "\072\001\001\000\002\001\001\000\010\016\370\023\371" +
    "\024\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\374\005\044\010\015\011\050\012\043\013\042\014" +
    "\056\015\016\017\031\020\027\021\007\022\017\023\026" +
    "\024\036\025\054\030\003\032\011\033\051\034\004\037" +
    "\045\040\013\041\034\042\023\001\001\000\056\005\044" +
    "\010\062\011\050\012\043\013\042\014\056\015\016\017" +
    "\031\020\027\021\007\022\017\023\026\024\036\025\054" +
    "\030\003\032\011\033\051\034\004\037\045\040\013\041" +
    "\034\042\023\001\001\000\002\001\001\000\006\031\377" +
    "\033\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\u0102\033\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u0107\030\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\u010c\005" +
    "\044\010\015\011\050\012\043\013\042\014\056\015\016" +
    "\017\031\020\027\021\007\022\017\023\026\024\036\025" +
    "\054\030\003\032\011\033\051\034\004\037\045\040\013" +
    "\041\034\042\023\001\001\000\056\005\044\010\062\011" +
    "\050\012\043\013\042\014\056\015\016\017\031\020\027" +
    "\021\007\022\017\023\026\024\036\025\054\030\003\032" +
    "\011\033\051\034\004\037\045\040\013\041\034\042\023" +
    "\001\001\000\002\001\001\000\004\030\u0113\001\001\000" +
    "\002\001\001\000\060\003\u0111\005\044\010\015\011\050" +
    "\012\043\013\042\014\056\015\016\017\031\020\027\021" +
    "\007\022\017\023\026\024\036\025\054\030\003\032\011" +
    "\033\051\034\004\037\045\040\013\041\034\042\023\001" +
    "\001\000\056\005\044\010\062\011\050\012\043\013\042" +
    "\014\056\015\016\017\031\020\027\021\007\022\017\023" +
    "\026\024\036\025\054\030\003\032\011\033\051\034\004" +
    "\037\045\040\013\041\034\042\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public static LinkedList<Errores> listaErrores = new LinkedList<>();
    public static boolean elseinstr = true;

    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("Error Sintactico Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("Error Sintactico no Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {





  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= IIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= INCREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= DECREMENTO FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= IWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= IDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= ISTARTWITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECLARACIONVECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= IRETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= IAPPEND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= IREMOVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Declaracion(b, c, a,d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= MUTABILIDAD ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                    Nativo c = new Nativo(tipoDato.NULL, a, aleft, aright);
                RESULT = new Declaracion(b,c, a,d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVar(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= ID CORCHE1 EXPRESION CORCHE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                            //objeto instruccion y probar si es asignacionVec, sino probar AsignacionList
                                                                            
                                                                            Instruccion asigVec = new AsignacionVec(a, c, b,null, aleft, aright);
                                                                            if (asigVec instanceof AsignacionVec){
                                                                                RESULT = asigVec;
                                                                            }else{
                                                                                Instruccion list = new AsignacionList(a,b,c,aleft,aright);
                                                                                if (list instanceof AsignacionList){
                                                                                    RESULT = list;
                                                                                }
                                                                            }
                                                                            
                                                                            RESULT = new AsignacionVec(a, c, b,null, aleft, aright);
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= ID CORCHE1 EXPRESION CORCHE2 CORCHE1 EXPRESION CORCHE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVec(a, d, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, p, c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ISTARTWITH ::= STARTWITH ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTARTWITH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ISTARTWITH ::= STARTWITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTARTWITH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACIONVECTORES ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHE1 CORCHE2 IGUAL CORCHE1 VECTORESLISTA CORCHE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        RESULT = new DeclaracionVectores(a, b, c, d,null, 1,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTORES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACIONVECTORES ::= MUTABILIDAD ID DOSPUNTOS TIPOS CORCHE1 CORCHE2 CORCHE1 CORCHE2 IGUAL CORCHE1 VECTORESLISTADOSDIMENSIONES CORCHE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        RESULT = new DeclaracionVectores(a, b, c,null, d, 2,aleft, aright);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTORES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VECTORESLISTA ::= VECTORESLISTA COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VECTORESLISTA ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VECTORESLISTADOSDIMENSIONES ::= VECTORESLISTADOSDIMENSIONES COMA CORCHE1 VECTORESLISTA CORCHE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTADOSDIMENSIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VECTORESLISTADOSDIMENSIONES ::= CORCHE1 VECTORESLISTA CORCHE2 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                    RESULT = new LinkedList<LinkedList<Instruccion>>(); LinkedList<Instruccion> aux = new LinkedList<>(); aux = a; RESULT.add(aux); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VECTORESLISTADOSDIMENSIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONLISTA ::= LIST MENOR TIPOS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 RESULT = new DeclaracionLista(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IAPPEND ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Append(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IAPPEND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new If(a,b,null,null, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new If(a,b,c,null, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE IIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new If(a,b,null,c, aleft, aright);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTFOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a,b,c,d,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ACTFOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ACTFOR ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ACTFOR ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IRETURN ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IRETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IRETURN ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		 


                            RESULT = new Return(null, 0, 0); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IRETURN",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INCREMENTO ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECREMENTO ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a,aleft,aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IDOWHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDOWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IMATCH ::= MATCH EXPRESION LLAVE1 CASOS DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casos c = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IMATCH ::= MATCH EXPRESION LLAVE1 CASOS LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, b, null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMATCH ::= MATCH EXPRESION LLAVE1 DEFAULT LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Casos c = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Match(a, null, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASOS ::= CASOS CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASOS ::= CASO 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASO ::= EXPRESION FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Casos(a, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEFAULT ::= BARRABAJA FLECHA LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Casos(null, a, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION MENORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION MAYORQUE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Casteos(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT= new AccesoVar(a, aleft,aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= ID CORCHE1 EXPRESION CORCHE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                Instruccion instr = new AccesoVec(a, b, null, aleft, aright);
                                                if (instr instanceof AccesoVec) {
                                                    AccesoVec aux = (AccesoVec) instr;
                                                    RESULT = aux;
                                                }else  {
                                                    Instruccion list = new AccesoList(a, b, aleft, aright);
                                                    if (list instanceof AccesoList){
                                                        AccesoList aux = (AccesoList) list;
                                                        RESULT = aux;
                                                    }
                                                    
                                                }
                                                RESULT = new AccesoVec(a, b,null, aleft, aright);   
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= ID CORCHE1 EXPRESION CORCHE2 CORCHE1 EXPRESION CORCHE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVec(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Remove(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
