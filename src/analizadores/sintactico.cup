
package analizadores;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Match;
import instrucciones.Else;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVar;
import expresiones.Casteos;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public static LinkedList<Errores> listaErrores = new LinkedList<>();
    public static boolean elseinstr = true;

    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("Error Sintactico Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("Error Sintactico no Recuperable", "No se esperaba el componente "+ s.value , s.left, s.right));
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

:}

action code
{:


:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, BOOLEANO, CARACTER, ID,MUTABILIDAD;
terminal FINCADENA, IMPRIMIR,INT,DOUBLE,STRING,CHAR,BOOL,DOSPUNTOS,IF,ELSE,FOR;
terminal PAR1, PAR2, MAS, MENOS, UMENOS, POTENCIA, MULTIPLICACION, DIVISION, MODULO, LLAVE1,LLAVE2;
terminal IGUALACION, MENORQUE, MAYORQUE, MENOR, MAYOR, DIFERENTE,IGUAL;
terminal OR, AND, NOT, XOR;
terminal String BREAK,CONTINUE,WHILE,DO, MATCH;

//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION,DECLARACION,ASIGNACION,IIF,IFOR,ACTFOR,IWHILE,IDOWHILE;
nonterminal Instruccion BREAKK,CONTINUEE,INCREMENTO,DECREMENTO,IMATCH;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;


precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUALACION, MENORQUE, MAYORQUE, MENOR, MAYOR, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence left POTENCIA;
precedence left UMENOS;



start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::=  IMPRESION:a                    {:  RESULT = a; :}
                | DECLARACION:a                   {: RESULT = a; :}
                | ASIGNACION:a                   {: RESULT = a; :}
                | IIF:a                          {: RESULT = a; :} 
                | IFOR:a                         {: RESULT = a; :}
                | BREAKK:a                       {: RESULT = a; :}
                | CONTINUEE:a                    {: RESULT = a; :}
                | INCREMENTO:a FINCADENA                  {: RESULT = a; :}
                | DECREMENTO:a FINCADENA                   {: RESULT = a; :}
                | IWHILE:a                      {: RESULT = a; :}
                | IDOWHILE:a                    {: RESULT = a; :}
                | IMATCH:a                      {: RESULT = a; :}
                | error FINCADENA {: :}
;
IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

DECLARACION ::= MUTABILIDAD:d ID:b DOSPUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA {:  RESULT = new Declaracion(b, c, a,d, aleft, aright); :}
                | MUTABILIDAD:d ID:b DOSPUNTOS TIPOS:a FINCADENA {:  
                    Nativo c = new Nativo(tipoDato.NULL, a, aleft, aright);
                RESULT = new Declaracion(b,c, a,d, aleft, aright); :}
;
ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;
IIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 {: 
            RESULT = new If(a,b, aleft, aright);
         :}
        |ELSE LLAVE1 INSTRUCCIONES:a LLAVE2 {: 
        //imprimir el valor de elseinstr
        System.out.println("el valor es :"+analizadores.parser.elseinstr); 
        if (analizadores.parser.elseinstr){
            RESULT = new Else(a, aleft, aright);
            analizadores.parser.elseinstr = false;
        }else{
            System.out.println("No se cumple el formato de la instruccion ELSE");
            parser.listaErrores.add(new Errores("Error Sintactico", "No se esperaba la instruccion ELSE", aleft, aright));
        }
            
             :}
        |ELSE IIF:a {: RESULT = a; :}
;
IFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTFOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2 
            {: RESULT = new For(a,b,c,d,aleft,aright);  :}
;
ACTFOR ::= ID:a IGUAL EXPRESION:b {: RESULT = new AsignacionVar(a, b, aleft, aright); :}
        | INCREMENTO:a {: RESULT = a; :}
        | DECREMENTO:a {: RESULT = a; :}
;
BREAKK ::= BREAK:a FINCADENA {: RESULT = new Break(aleft, aright); :}
;
CONTINUEE ::= CONTINUE:a FINCADENA {: RESULT = new Continue(aleft, aright); :}
;
INCREMENTO ::= ID:a MAS MAS {: RESULT = new Incremento(a,aleft,aright);  :}
;
DECREMENTO ::= ID:a MENOS MENOS {: RESULT = new Decremento(a,aleft,aright);  :}
;
TIPOS ::= INT {: RESULT = new Tipo(tipoDato.ENTERO); :}
        | DOUBLE {: RESULT = new Tipo(tipoDato.DECIMAL); :}
        | STRING {: RESULT = new Tipo(tipoDato.CADENA); :}
        | CHAR {: RESULT = new Tipo(tipoDato.CARACTER); :}
        | BOOL {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
;
IWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 {: RESULT = new While(a, b, aleft, aright); :}
;
IDOWHILE ::= DO LLAVE1 INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2 FINCADENA {: RESULT = new DoWhile(b, a, aleft, aright); :}
;

IMATCH ::= MATCH EXPRESION:a LLAVE1 INSTRUCCIONES:b LLAVE2 {: //RESULT = new Match(a, b, aleft, aright); 
:}
;



EXPRESION ::= MENOS EXPRESION:a {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | EXPRESION:a MENOS EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   :}
            | EXPRESION:a DIVISION EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   :}
            | EXPRESION:a POTENCIA EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   :}
            | EXPRESION:a MODULO EXPRESION:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   :}
            | EXPRESION:a IGUALACION EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); :}
            | EXPRESION:a MENORQUE EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   :}
            | EXPRESION:a MAYORQUE EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   :}
            | EXPRESION:a MENOR EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);   :}
            | EXPRESION:a MAYOR EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);   :}
            | EXPRESION:a DIFERENTE EXPRESION:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);   :}
            | EXPRESION:a OR EXPRESION:b {:   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   :}
            | EXPRESION:a AND EXPRESION:b {:   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   :}
            | EXPRESION:a XOR EXPRESION:b {:   RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright);   :}
            | NOT EXPRESION:a {:   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   :}
            | PAR1 TIPOS:a PAR2 EXPRESION:b {:   RESULT = new Casteos(b, a, aleft, aright);   :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   :}
            | BOOLEANO:a    {:  RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | CARACTER:a    {:  RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   :}
            | ID:a          {:   RESULT= new AccesoVar(a, aleft,aright);   :}
            | PAR1 EXPRESION:a PAR2 {:   RESULT = a;   :}
;